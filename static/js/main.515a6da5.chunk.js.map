{"version":3,"sources":["assets/img/wave.svg","assets/img/play.svg","assets/img/pause.svg","assets/img/readed.svg","assets/img/noreaded.svg","components/Button/index.js","components/Block/index.js","utils/helpers/validateField.js","utils/helpers/openNotification.js","components/Message/index.js","utils/helpers/convertCurrentTime.js","components/DialogItem/index.js","components/Time/index.js","components/IconReaded/index.js","components/Dialogs/index.js","components/AudioMessage/index.js","components/Avatar/index.js","utils/helpers/generateAvatarFromHash.js","components/Status/index.js","components/ChatInput/index.js","components/Messages/index.js","components/FormField/index.jsx","modules/LoginForm/components/LoginForm.jsx","utils/validate.js","core/axios.js","utils/api/dialogs.js","utils/api/messages.js","utils/api/user.js","redux/actions/dialogs.js","redux/actions/messages.js","redux/actions/user.js","modules/LoginForm/containers/LoginForm.js","modules/RegisterForm/components/RegisterForm.jsx","modules/RegisterForm/containers/RegisterForm.js","pages/Auth/components/CheckEmailInfo.jsx","pages/Auth/index.jsx","core/socket.js","containers/Dialogs.js","containers/Messages.js","containers/ChatInput.js","containers/Status.js","pages/Home/index.jsx","App.js","redux/reducers/dialogs.js","redux/reducers/messages.js","redux/reducers/user.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","Button","props","className","classNames","size","Block","children","key","touched","errors","text","type","title","duration","notification","message","description","MessageAudio","audioSrc","audioElem","useRef","useState","isPlaying","setIsPlaying","progress","setProgress","currentTime","setCurrentTime","useEffect","current","volume","addEventListener","ref","src","preload","style","width","onClick","pause","play","pauseSvg","alt","playSvg","waveSvg","number","mins","Math","floor","secs","toFixed","convertCurrentTime","Message","avatar","user","date","isMe","isReaded","attachments","isTyping","audio","length","map","item","index","url","filename","defaultProps","DialogItem","created_at","_id","unreaded","onSelect","currentDialogId","lastMessage","to","isOnline","bind","fullname","Date","createdAt","isToday","format","Time","distanceInWordsToNow","addSuffix","locale","ruLocale","propTypes","PropTypes","object","IconReaded","readedSvg","noReadedSvg","Dialogs","items","userId","onSearch","inputValue","onSelectDialog","Search","value","placeholder","onChange","e","target","orderBy","author","image","Empty","PRESENTED_IMAGE_SIMPLE","AudioMessage","fullName","Avatar","hash","substr","split","char","charCodeAt","r","g","b","color","tinycolor","lighten","saturate","toHexString","colorLighten","generateAvatarFromHash","firstChar","toUpperCase","background","Status","online","ChatInput","fetchSendMessage","setValue","emojiPickerVisible","setShowEmojiPicker","set","shape","icon","onKeyUp","keyCode","onFiles","files","console","log","containerProps","uploadProps","accept","multiple","Messages","isLoading","blockRef","tip","FormField","name","handleChange","handleBlur","values","Item","validateStatus","validateField","help","hasFeedback","id","prefix","onBlur","LoginForm","handleSubmit","isValid","isSubmitting","onSubmit","email","password","disabled","isAuth","rules","test","password_2","Object","keys","forEach","axios","defaults","baseURL","headers","common","window","localStorage","token","get","dialogId","post","dialog_id","postData","actions","setDialogs","payload","setCurrentDialogId","fetchDialogs","dispatch","dialogsApi","then","data","setMessages","addMessage","getState","dialogs","dialog","messagesApi","setIsLoading","bool","fetchMessages","catch","setUserData","setIsAuth","fetchUserData","userApi","err","response","status","fetchUserLogin","openNotification","fetchUserRegister","LoginFormContainer","withFormik","enableReinitialize","mapPropsToValues","validate","validateForm","setSubmitting","history","push","displayName","connect","userActions","RegisterForm","RegisterFormContainer","CheckEmailInfo","location","verified","setVerified","search","info","renderTextInfo","subTitle","extra","Auth","exact","path","component","React","Component","socket","io","dialogsActions","Array","from","filtred","setFiltredItems","onChangeInput","filter","toLowerCase","indexOf","partner","onNewDialog","on","removeListener","messages","messagesActions","messagesRef","onNewMessage","scrollTo","scrollHeight","currentDialogObj","Home","render","initialState","pathname","combineReducers","state","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunkMiddleware","enhancer","applyMiddleware","store","createStore","rootReducer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.515a6da5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wave.86c27fea.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.65f03140.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause.a61933e8.svg\";","module.exports = __webpack_public_path__ + \"static/media/readed.2da46147.svg\";","module.exports = __webpack_public_path__ + \"static/media/noreaded.1456f013.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button as BaseButton } from 'antd'; // из библиотеки типо бутстрап взяли готовую кнопку, работает благодаря index.scss \r\nimport classNames from 'classnames';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = props => { \r\n    // props.className - присвоит родительский класс\r\n    // {...props} лучше ставить вначале, чтоб не перетирать добавленные атрибуты, кот. стоят вместе\r\n    return (\r\n        <div>\r\n            <BaseButton {...props} className={classNames('button', props.className, {\r\n                \"button--large\": props.size === 'large'\r\n            })} ></BaseButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react'\r\nimport classNames from 'classnames';\r\n\r\nimport './Block.scss';\r\n\r\nconst Block = ({ children, className }) => { // ({ children }) с помощью деструктуризации вытаскиваем из props.children\r\n    return (\r\n        <div className={classNames(\"block\", className)}>{children}</div>\r\n    )\r\n}\r\n\r\nexport default Block;\r\n","export default (key, touched, errors) => {\r\n    if (touched[key]) {\r\n        if (errors[key]) {\r\n            return \"error\";\r\n        } else {\r\n            return \"success\";\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n};\r\n","import { notification } from \"antd\";\r\n\r\nexport default ({ text, type = \"info\", title, duration = 3 }) =>\r\n  notification[type]({\r\n    message: title,\r\n    description: text,\r\n    duration: duration\r\n  });\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\nimport waveSvg from \"../../assets/img/wave.svg\";\r\nimport playSvg from \"../../assets/img/play.svg\";\r\nimport pauseSvg from \"../../assets/img/pause.svg\";\r\n\r\nimport { Time, IconReaded, Avatar } from \"../\";\r\nimport { convertCurrentTime } from \"../../utils/helpers\";\r\n\r\nimport \"./Message.scss\";\r\n\r\nconst MessageAudio = ({ audioSrc }) => {\r\n  const audioElem = useRef(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    audioElem.current.volume = \"0.1\";\r\n    audioElem.current.addEventListener(\r\n      \"playing\",\r\n      () => {\r\n        setIsPlaying(true);\r\n      },\r\n      false\r\n    );\r\n\r\n    audioElem.current.addEventListener(\r\n      \"ended\",\r\n      () => {\r\n        setIsPlaying(false);\r\n        setProgress(0);\r\n        setCurrentTime(0);\r\n      },\r\n      false\r\n    );\r\n\r\n    audioElem.current.addEventListener(\r\n      \"pause\",\r\n      () => {\r\n        setIsPlaying(false);\r\n      },\r\n      false\r\n    );\r\n\r\n    audioElem.current.addEventListener(\"timeupdate\", () => {\r\n      const duration = (audioElem.current && audioElem.current.duration) || 0; // общее время аудио\r\n      setCurrentTime(audioElem.current.currentTime);\r\n      setProgress((audioElem.current.currentTime / duration) * 100);\r\n    });\r\n  }, []);\r\n\r\n  const togglePlay = () => {\r\n    if (!isPlaying) {\r\n      audioElem.current.play();\r\n    } else {\r\n      audioElem.current.pause();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"message__audio\">\r\n      <audio ref={audioElem} src={audioSrc} preload=\"auto\"></audio>\r\n      <div\r\n        className=\"message__audio-progress\"\r\n        style={{ width: progress + \"40%\" }}\r\n      ></div>\r\n      <div className=\"message__audio-info\">\r\n        <div className=\"message__audio-btn\">\r\n          <button onClick={togglePlay}>\r\n            {isPlaying ? (\r\n              <img src={pauseSvg} alt=\"Pause svg\" />\r\n            ) : (\r\n              <img src={playSvg} alt=\"Play svg\" />\r\n            )}\r\n          </button>\r\n        </div>\r\n        <div className=\"message__audio-wave\">\r\n          <img src={waveSvg} alt=\"Wave svg\" />\r\n        </div>\r\n        <span className=\"message__audio-duration\">\r\n          {convertCurrentTime(currentTime)}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message = ({\r\n  avatar,\r\n  user,\r\n  text,\r\n  date,\r\n  isMe,\r\n  isReaded,\r\n  attachments,\r\n  isTyping,\r\n  audio\r\n}) => {\r\n  return (\r\n    <div\r\n      className={classNames(\"message\", {\r\n        \"message--isme\": isMe,\r\n        \"message--is-typing\": isTyping,\r\n        \"message--image\": attachments && attachments.length === 1,\r\n        \"message--is-audio\": audio\r\n      })}\r\n    >\r\n      <div className=\"message__content\">\r\n        <IconReaded isMe={isMe} isReaded={isReaded} />\r\n        <div className=\"message__avatar\">\r\n          <Avatar user={user} />\r\n        </div>\r\n        <div>\r\n          <div className=\"message__info\">\r\n            {(audio || text || isTyping) && ( // если есть текст сообщения или он печатается или аудио есть, то бабл (оболочка сообщения) - есть\r\n              <div className=\"message__bubble\">\r\n                {text && <p className=\"message__text\">{text}</p>}\r\n                {isTyping && (\r\n                  <div className=\"message__typing\">\r\n                    <span />\r\n                    <span />\r\n                    <span />\r\n                  </div>\r\n                )}\r\n                {audio && <MessageAudio audioSrc={audio} />}\r\n              </div>\r\n            )}\r\n\r\n            {attachments && (\r\n              <div className=\"message__attachments\">\r\n                {attachments.map((item, index) => (\r\n                  <div key={index} className=\"message__attachments-item\">\r\n                    <img src={item.url} alt={item.filename} />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n\r\n            {date && (\r\n              <span className=\"message__date\">\r\n                <Time date={date} />\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMessage.defaultProps = {\r\n  user: {}\r\n};\r\n\r\nMessage.propTypes = {\r\n  avatar: PropTypes.string,\r\n  text: PropTypes.string,\r\n  date: PropTypes.object,\r\n  user: PropTypes.object,\r\n  attachments: PropTypes.array,\r\n  isTyping: PropTypes.bool, // вводит ли человек текст или нет\r\n  isMe: PropTypes.bool,\r\n  isReaded: PropTypes.bool,\r\n  audio: PropTypes.string\r\n};\r\n\r\nexport default Message;\r\n","export default number => {\r\n  const mins = Math.floor(number / 60);\r\n  const secs = (number % 60).toFixed();\r\n  return `${mins < 10 ? \"0\" : \"\"}${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n};\r\n","import React from \"react\";\r\nimport className from \"classnames\";\r\nimport format from \"date-fns/format\"; // Return the formatted date string in the given format.\r\nimport isToday from \"date-fns/isToday\"; // Is the given date today?\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { IconReaded, Avatar } from \"../\";\r\n\r\nconst getMessageTime = created_at => {\r\n  if (isToday(created_at)) {\r\n    return format(created_at, \"HH:mm\");\r\n  } else {\r\n    return format(created_at, \"dd.MM.yyyy\");\r\n  }\r\n};\r\n\r\nconst DialogItem = ({\r\n  _id,\r\n  unreaded,\r\n  isMe,\r\n  onSelect,\r\n  currentDialogId,\r\n  lastMessage\r\n}) => (\r\n  <Link to={`/dialog/${_id}`}>\r\n  <div\r\n    className={className(\"dialogs__item\", {\r\n      \"dialogs__item--online\": lastMessage.user.isOnline,\r\n      \"dialogs__item--selected\": currentDialogId === _id\r\n    })}\r\n    onClick={onSelect.bind(this, _id)} // привязка контекста к onSelect\r\n  >\r\n    <div className=\"dialogs__item-avatar\">\r\n      <Avatar user={lastMessage.user} />\r\n    </div>\r\n    <div className=\"dialogs__item-info\">\r\n      <div className=\"dialogs__item-info-top\">\r\n        <b>{lastMessage.user.fullname}</b>\r\n        <span>{getMessageTime(new Date(lastMessage.createdAt))}</span>\r\n      </div>\r\n      <div className=\"dialogs__item-info-bottom\">\r\n        <p>{lastMessage.text}</p>\r\n        {isMe && <IconReaded isMe={true} isReaded={false} />}\r\n        {unreaded > 0 && (\r\n          <div className=\"dialogs__item-info-bottom-count\">\r\n            {unreaded > 9 ? \"+9\" : unreaded}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </Link>\r\n);\r\n\r\nexport default DialogItem;\r\n","import PropTypes from \"prop-types\";\r\nimport distanceInWordsToNow from \"date-fns/formatDistanceToNow\";\r\nimport ruLocale from \"date-fns/locale/ru\";\r\n\r\nconst Time = ({ date }) => (\r\n  distanceInWordsToNow(date, {\r\n    addSuffix: true,\r\n    locale: ruLocale\r\n  })\r\n);\r\n\r\nTime.propTypes = {\r\n  date: PropTypes.object\r\n};\r\n\r\nexport default Time;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport readedSvg from \"../../assets/img/readed.svg\";\r\nimport noReadedSvg from \"../../assets/img/noreaded.svg\";\r\n\r\nconst IconReaded = ({ isMe, isReaded }) =>\r\n  (isMe && // если это автор сообщения и сообщение прочитано, то 2 ковычки возле сообщения, не прочитано - одни\r\n    (isReaded ? (\r\n      <img className=\"message__icon-readed\" src={readedSvg} alt=\"Readed icon\" />\r\n    ) : (\r\n      <img\r\n        className=\"message__icon-readed message__icon-readed--no\"\r\n        src={noReadedSvg}\r\n        alt=\"No readed icon\"\r\n      />\r\n    ))) ||\r\n  null;\r\n\r\nIconReaded.propTypes = {\r\n  isMe: PropTypes.bool,\r\n  isReaded: PropTypes.bool\r\n};\r\n\r\nexport default IconReaded;","import React from \"react\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { Input, Empty } from \"antd\";\r\n\r\nimport { DialogItem } from \"../\";\r\n\r\nimport \"./Dialogs.scss\";\r\n\r\nconst Dialogs = ({ items, userId, onSearch, inputValue, currentDialogId, onSelectDialog }) => (\r\n  <div className=\"dialogs\">\r\n    <div className=\"dialogs__search\">\r\n      <Input.Search\r\n        value={inputValue}\r\n        placeholder=\"Поиск среди контактов\"\r\n        onChange={e => onSearch(e.target.value)}\r\n      />\r\n    </div>\r\n    {items.length ? orderBy(items, [\"created_at\"], [\"desc\"]).map((\r\n      item // orderBy сортирует объекты по конкретному полю (можно несколько)\r\n    ) => (\r\n      <DialogItem\r\n        onSelect={onSelectDialog}\r\n        key={item._id}\r\n        // проверка id из бд и id из redux state для проставки галочки прочтения\r\n        isMe={item.author._id === userId}\r\n        currentDialogId={currentDialogId}\r\n        {...item}\r\n      />\r\n    )) : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description=\"Ничего не найдено\" />}\r\n  </div>\r\n);\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\nimport { Time, IconReaded } from \"../\";\r\n\r\nimport \"./AudioMessage.scss\";\r\n\r\nconst AudioMessage = ({\r\n  avatar,\r\n  user,\r\n  text,\r\n  date,\r\n  isMe,\r\n  isReaded,\r\n  attachments,\r\n  isTyping,\r\n}) => (\r\n  <div\r\n    className={classNames(\"message\", {\r\n      \"message--isme\": isMe,\r\n      \"message--is-typing\": isTyping,\r\n      \"message--image\": attachments && attachments.length === 1\r\n    })}\r\n  >\r\n    <div className=\"message__content\">\r\n      <IconReaded isMe={isMe} isReaded={isReaded} />\r\n      <div className=\"message__avatar\">\r\n        <img src={avatar} alt={`Avatar ${user.fullName}`} />\r\n      </div>\r\n      <div>\r\n        <div className=\"message__info\">\r\n          {(text || isTyping) && ( // если есть текст сообщения или он печатается, то бабл (оболочка сообщения) - есть\r\n            <div className=\"message__bubble\">\r\n              {text && <p className=\"message__text\">{text}</p>}\r\n              {isTyping && (\r\n                <div className=\"message__typing\">\r\n                  <span />\r\n                  <span />\r\n                  <span />\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          <div className=\"message__attachments\">\r\n            {attachments &&\r\n              attachments.map(item => (\r\n                <div className=\"message__attachments-item\">\r\n                  <img src={item.url} alt={item.filename} />\r\n                </div>\r\n              ))}\r\n          </div>\r\n          {date && (\r\n            <span className=\"message__date\">\r\n              <Time date={date} />\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAudioMessage.defaultProps = {\r\n  user: {}\r\n};\r\n\r\nAudioMessage.propTypes = {\r\n  avatar: PropTypes.string,\r\n  text: PropTypes.string,\r\n  date: PropTypes.object,\r\n  user: PropTypes.object,\r\n  attachments: PropTypes.array,\r\n  isTyping: PropTypes.bool, // вводит ли человек текст или нет\r\n  isMe: PropTypes.bool,\r\n  isReaded: PropTypes.bool,\r\n\r\n};\r\n\r\nexport default AudioMessage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { generateAvatarFromHash } from \"../../utils/helpers\";\r\n\r\nimport \"./Avatar.scss\";\r\n\r\nconst Avatar = ({ user }) => {\r\n  if (user.avatar) {\r\n    return (\r\n      <img\r\n        className=\"avatar\"\r\n        src={user.avatar}\r\n        alt={`Avatar ${user.fullname}`}\r\n      />\r\n    );\r\n  } else {\r\n    const { color, colorLighten } = generateAvatarFromHash(user._id); // {color: \"#90443c\", colorLighten: \"#d7665b\"}\r\n    const firstChar = user.fullname[0].toUpperCase();\r\n    return (\r\n      <div\r\n        style={{\r\n          background: `linear-gradient(135deg, ${color} 0%, ${colorLighten} 96.52%)`\r\n        }}\r\n        className=\"avatar avatar--symbol\"\r\n      >\r\n        {firstChar}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nAvatar.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Avatar;\r\n","import tinycolor from \"tinycolor2\";\r\n\r\nconst getCorrectIndex = number => {\r\n  if (number > 255) {\r\n    return 255;\r\n  }\r\n  if (number < 0) {\r\n    return 0;\r\n  }\r\n  return number > 255 ? 255 : number < 0 ? 0 : number;\r\n};\r\n\r\n// hash - 'd95b28d46ebc689284bb1e90692f8d4'\r\nexport default hash => {\r\n  const [r, g, b] = hash \r\n    .substr(0, 3)\r\n    .split(\"\")\r\n    .map(char => getCorrectIndex(char.charCodeAt(0)));\r\n\r\n    return {\r\n      color: tinycolor({ r, g, b }) // {r: 100, g: 57, b: 53}\r\n        .lighten(10)\r\n        .saturate(10)\r\n        .toHexString(),\r\n      colorLighten: tinycolor({ r, g, b })\r\n        .lighten(30)\r\n        .saturate(30)\r\n        .toHexString()\r\n    };\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./Status.scss\";\r\n\r\nconst Status = ({ online, fullname }) => (\r\n  <div className=\"chat__dialog-header-center\">\r\n    <b className=\"chat__dialog-header-username\">{fullname}</b>\r\n    <div className=\"chat__dialog-header-status\">\r\n      <span\r\n        className={classNames(\"status\", { \"status--online\": online })}\r\n      >\r\n        {online ? \"онлан\" : \"офлайн\"}\r\n      </span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nStatus.propTypes = {\r\n  online: PropTypes.bool\r\n};\r\n\r\nexport default Status;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Input } from \"antd\";\r\nimport { UploadField } from \"@navjobs/upload\"; // для загрузки фото https://github.com/ConstructionJobs/upload\r\nimport { Picker } from \"emoji-mart\";\r\n\r\nimport \"./ChatInput.scss\";\r\n\r\nconst ChatInput = ({ fetchSendMessage, currentDialogId }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [emojiPickerVisible, setShowEmojiPicker] = useState(false);\r\n\r\n  const toggleEmojiPicker = () => {\r\n    setShowEmojiPicker(!emojiPickerVisible);\r\n  };\r\n\r\n  const handleSendMessage = e => {\r\n    if (e.keyCode === 13) { // на Enter\r\n      fetchSendMessage(value, currentDialogId);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-input\">\r\n      <div className=\"chat-input__smile-btn\">\r\n        {emojiPickerVisible && (\r\n          <div className=\"chat-input__emoji-picker\">\r\n            <Picker set=\"apple\" />\r\n          </div>\r\n        )}\r\n        <Button\r\n          onClick={toggleEmojiPicker}\r\n          type=\"link\"\r\n          shape=\"circle\"\r\n          icon=\"smile\"\r\n        />\r\n      </div>\r\n      <Input\r\n        onChange={e => setValue(e.target.value)}\r\n        value={value}\r\n        onKeyUp={handleSendMessage}\r\n        size=\"large\"\r\n        placeholder=\"Введите текст сообщения…\"\r\n      />\r\n      <div className=\"chat-input__actions\">\r\n        <UploadField\r\n          onFiles={files => console.log(files)}\r\n          containerProps={{\r\n            className: \"chat-input__actions-upload-btn\"\r\n          }}\r\n          uploadProps={{\r\n            accept: \".jpg, .jpeg, .png, .gif, .bmp\",\r\n            multiple: \"multiple\" // для загрузки больше чем 1\r\n          }}\r\n          multiple // для загрузки больше чем 1\r\n        >\r\n          <Button type=\"link\" shape=\"circle\" icon=\"camera\" />\r\n        </UploadField>\r\n        {value ? (\r\n          <Button type=\"link\" shape=\"circle\" icon=\"check-circle\" />\r\n        ) : (\r\n          <Button type=\"link\" shape=\"circle\" icon=\"audio\" />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nChatInput.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default ChatInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Empty, Spin } from \"antd\";\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./Messages.scss\";\r\n\r\nimport { Message } from \"../../components\";\r\n\r\nconst Messages = ({ isLoading, items, blockRef, user }) => {\r\n  return (\r\n    <div\r\n      ref={blockRef} // т.к. блок с классом messages имеет scroll, то им можно манипулировать\r\n      className={classNames(\"messages\", { \"messages--loading\": isLoading })}\r\n    >\r\n      {isLoading ? ( // загрузка идёт (true) и сообщений нет - идёт загрузка\r\n        <Spin size=\"large\" tip=\"Загрузка сообщений...\"></Spin>\r\n      ) : items && !isLoading ? ( // если загрузка не идёт (false) и есть сообщения\r\n        items.length > 0 ? items.map(item => <Message key={item._id} isMe={user._id === item.user._id} {...item} />) : <Empty description=\"Диалог пуст\" />\r\n      ) : (\r\n        // если нет сообщений\r\n        <Empty description=\"Откройте диалог\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nMessages.propTypes = {\r\n  items: PropTypes.array\r\n};\r\n\r\nexport default Messages;\r\n","import React from \"react\";\r\nimport { Form, Icon, Input } from \"antd\";\r\n\r\nimport { validateField } from \"../../utils/helpers\";\r\n\r\nconst FormField = ({\r\n  name,\r\n  placeholder,\r\n  icon,\r\n  type,\r\n  handleChange,\r\n  handleBlur,\r\n  touched,\r\n  errors,\r\n  values\r\n}) => {\r\n  return (\r\n    <Form.Item\r\n      validateStatus={validateField(name, touched, errors)}\r\n      help={!touched[name] ? \"\" : errors[name]}\r\n      hasFeedback\r\n    >\r\n      <Input\r\n        id={name}\r\n        prefix={<Icon type={icon} style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n        size=\"large\"\r\n        placeholder={placeholder}\r\n        value={values[name]}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        type={type}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default FormField;\r\n","import React from \"react\";\r\nimport { Form, Icon, Input } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button, Block } from \"../../../components\";\r\nimport { validateField } from \"../../../utils/helpers\";\r\n\r\nconst LoginForm = props => {\r\n  const {\r\n    values,\r\n    touched,\r\n    errors,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    isValid,\r\n    isSubmitting\r\n  } = props;\r\n  // вся форма заимствована из https://ant.design/components/form/ для неё необходимо делать классовую компоненту\r\n  return (\r\n    <div>\r\n      <div className=\"auth__top\">\r\n        <h2>Войти в аккаунт</h2>\r\n        <p>Пожалуйста войдите в свой аккаунт</p>\r\n      </div>\r\n      <Block>\r\n        <Form onSubmit={handleSubmit} className=\"login-form\">\r\n          <Form.Item\r\n            /* hasFeedback отображает иконку в зависимости от validateStatus=\"success\" */\r\n            validateStatus={validateField(\"email\", touched, errors)}\r\n            help={!touched.email ? \"\" : errors.email}\r\n            hasFeedback\r\n          >\r\n            <Input\r\n              id=\"email\"\r\n              prefix={<Icon type=\"mail\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n              size=\"large\"\r\n              placeholder=\"E-Mail\"\r\n              value={values.email}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            validateStatus={validateField(\"password\", touched, errors)}\r\n            help={!touched.password ? \"\" : errors.password}\r\n            hasFeedback\r\n          >\r\n            <Input\r\n              id=\"password\"\r\n              prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n              size=\"large\"\r\n              type=\"password\"\r\n              placeholder=\"Пароль\"\r\n              value={values.password}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            {/* если отправляется и есть ошибка, отобразит span */}\r\n            {isSubmitting && !isValid && <span>Ошибка!</span>}\r\n            <Button disabled={isSubmitting} onClick={handleSubmit} type=\"primary\" size=\"large\">\r\n              Войти в аккаунт\r\n            </Button>\r\n          </Form.Item>\r\n          <Link className=\"auth__register-link\" to=\"/register\">\r\n            Зарегистрироваться\r\n          </Link>\r\n        </Form>\r\n      </Block>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","export default ({ isAuth, values, errors }) => {\r\n  const rules = {\r\n    email: value => {\r\n      if (!value) {\r\n        errors.email = \"Введите E-Mail\";\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        errors.email = \"Неверный E-Mail\";\r\n      }\r\n    },\r\n    password: value => {\r\n      if (!value) {\r\n        errors.password = \"Введите пароль\";\r\n      } else if (\r\n        // если это не авторизация\r\n        !isAuth &&\r\n        // и пароль не совпадает регулярке. в пароле должна быть как минимум маленькая, большая буква eng, цифра и длина > 8\r\n        !/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/.test(value)\r\n      ) {\r\n        errors.password = \"Слишком лёгкий пароль\";\r\n      }\r\n    },\r\n    password_2: value => {\r\n        console.log(value)\r\n      if (!isAuth && value !== values.password) {\r\n        errors.password_2 = \"Пароли не совпадают\";\r\n      } else if (!value) {\r\n        errors.password_2 = \"Введите пароль\";\r\n      }\r\n    },\r\n    fullname: value => {\r\n      if (!isAuth && !value) {\r\n        errors.fullname = \"Укажите свое имя и фамилию\";\r\n      }\r\n    }\r\n  };\r\n  // values - это объект из Formik, в кот. содержится имена(id) input-ов формы, типо email, password\r\n  Object.keys(values).forEach(key => rules[key] && rules[key](values[key]));\r\n};\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://react-nodejs-mongodb-chat.herokuapp.com/'; //window.location.origin; // из url берём адрес http://localhost:3000\r\naxios.defaults.headers.common[\"token\"] = window.localStorage.token;\r\n\r\nwindow.axios = axios;\r\n\r\nexport default axios;","import { axios } from '../../core';\r\n\r\nexport default {\r\n    getAll: () => axios.get('/dialogs')\r\n}","import { axios } from \"../../core\";\r\n\r\nexport default {\r\n  getAllByDialogId: id => axios.get(`/messages?dialog=${id}`),\r\n  send: (text, dialogId) =>\r\n    axios.post(\"/messages\", {\r\n      text: text,\r\n      dialog_id: dialogId\r\n    })\r\n};\r\n","import { axios } from \"../../core\";\r\n\r\nexport default {\r\n  signIn: postData => axios.post(\"/user/login\", postData),\r\n  signUp: postData => axios.post(\"/user/registration\", postData),\r\n  verifyHash: hash => axios.get(\"/user/verify?hash=\" + hash),\r\n  getMe: () => axios.get(\"/user/me\"),\r\n};\r\n","import { dialogsApi } from \"../../utils/api\";\r\n\r\nconst actions = {\r\n  setDialogs: items => ({\r\n    type: \"DIALOGS:SET_ITEMS\",\r\n    payload: items\r\n  }),\r\n  setCurrentDialogId: id => ({\r\n    type: \"DIALOGS:SET_CURRENT_DIALOG_ID\",\r\n    payload: id\r\n  }),\r\n  fetchDialogs: () => dispatch => {\r\n    dialogsApi.getAll().then(({ data }) => {\r\n      dispatch(actions.setDialogs(data));\r\n    });\r\n  }\r\n};\r\n\r\nexport default actions;\r\n","import { messagesApi } from \"../../utils/api\";\r\n\r\nconst actions = {\r\n  setMessages: items => ({\r\n    type: \"MESSAGES:SET_ITEMS\",\r\n    payload: items\r\n  }),\r\n  addMessage: message => (dispatch, getState) => {\r\n    const { dialogs } = getState();\r\n    const { currentDialogId } = dialogs;\r\n\r\n    if (currentDialogId === message.dialog._id) {\r\n      dispatch({\r\n        type: \"MESSAGES:ADD_MESSAGE\",\r\n        payload: message\r\n      });\r\n    }\r\n  },\r\n  fetchSendMessage: (text, dialogId) => dispatch => {\r\n    messagesApi.send(text, dialogId);\r\n  },\r\n  setIsLoading: bool => ({\r\n    type: \"MESSAGES:SET_IS_LOADING\",\r\n    payload: bool\r\n  }),\r\n  fetchMessages: dialogId => dispatch => {\r\n    dispatch(actions.setIsLoading(true));\r\n    messagesApi\r\n      .getAllByDialogId(dialogId)\r\n      .then(({ data }) => {\r\n        dispatch(actions.setMessages(data));\r\n      })\r\n      .catch(() => {\r\n        dispatch(actions.setIsLoading(false));\r\n      });\r\n  }\r\n};\r\n\r\nexport default actions;\r\n","import { openNotification } from \"../../utils/helpers\";\r\nimport { userApi } from \"../../utils/api\";\r\n\r\nconst actions = {\r\n  setUserData: data => ({\r\n    type: \"USER:SET_DATA\",\r\n    payload: data\r\n  }),\r\n  setIsAuth: bool => ({\r\n    type: \"USER:SET_IS_AUTH\",\r\n    payload: bool\r\n  }),\r\n  fetchUserData: () => dispatch => {\r\n    userApi\r\n      .getMe()\r\n      .then(({ data }) => {\r\n        dispatch(actions.setUserData(data));\r\n      })\r\n      .catch(err => {\r\n        if (err.response.status === 403) {\r\n          dispatch(actions.setIsAuth(false));\r\n          delete window.localStorage.token;\r\n        }\r\n      });\r\n  },\r\n  fetchUserLogin: postData => dispatch => {\r\n    return userApi\r\n      .signIn(postData)\r\n      .then(({ data }) => {\r\n        const { status, token } = data;\r\n        if (status === \"error\") {\r\n          openNotification({\r\n            title: \"Ошибка при авторизации!\",\r\n            text: \"Неверный логин или пароль.\",\r\n            type: \"error\"\r\n          });\r\n        } else {\r\n          openNotification({\r\n            title: \"Отлично!\",\r\n            text: \"Авторизация успешна.\",\r\n            type: \"success\"\r\n          });\r\n\r\n          window.axios.defaults.headers.common[\"token\"] = token; // записываем токен в header axios для последующих запросов с клиента\r\n          window.localStorage[\"token\"] = token;\r\n\r\n          dispatch(actions.fetchUserData());\r\n          dispatch(actions.setIsAuth(true));\r\n        }\r\n\r\n        return data;\r\n      })\r\n      .catch(({ response }) => {\r\n        if (response.status === 403) {\r\n          openNotification({\r\n            title: \"Ошибка при авторизации\",\r\n            text: \"Неверный логин или пароль\",\r\n            type: \"error\"\r\n          });\r\n        }\r\n      });\r\n  },\r\n  fetchUserRegister: postData => dispatch => {\r\n    return userApi.signUp(postData).then(({ data }) => {\r\n      return data;\r\n    });\r\n  }\r\n};\r\n\r\nexport default actions;\r\n","import { withFormik } from \"formik\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport LoginForm from \"../components/LoginForm\";\r\nimport validateForm from \"../../../utils/validate\";\r\nimport { userActions } from \"../../../redux/actions\";\r\n\r\nconst LoginFormContainer = withFormik({\r\n  enableReinitialize: true,\r\n  // пустые поля нужны для того чтобы когда делаем фокус на input-e, чтобы выскачила ошибка, без пустых полей будет как success\r\n  mapPropsToValues: () => ({\r\n    email: \"\",\r\n    password: \"\"\r\n  }),\r\n\r\n  validate: values => {\r\n    let errors = {};\r\n    validateForm({ isAuth: true, values, errors });\r\n    return errors;\r\n  },\r\n\r\n  handleSubmit: (values, { setSubmitting, props }) => {\r\n    const { fetchUserLogin } = props;\r\n\r\n    fetchUserLogin(values)\r\n      .then(({status}) => {\r\n        if(status === 'success') {\r\n          props.history.push(\"/im\");\r\n        }\r\n        setSubmitting(false);\r\n      })\r\n      .catch(() => {\r\n        setSubmitting(false);\r\n      });\r\n  },\r\n\r\n  displayName: \"LoginForm\"\r\n})(LoginForm);\r\n\r\nexport default connect(\r\n  null,\r\n  userActions\r\n)(LoginFormContainer);\r\n","import React from \"react\";\r\nimport { Form, Icon } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button, Block, FormField } from \"../../../components\";\r\n\r\nconst success = false; // если регистрация не прошла то компонента не отрисуется\r\n\r\nconst RegisterForm = props => {\r\n  const {\r\n    values,\r\n    touched,\r\n    errors,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    isValid,\r\n    isSubmitting\r\n  } = props;\r\n\r\n  // вся форма заимствована из https://ant.design/components/form/\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"auth__top\">\r\n        <h2>Регистрация</h2>\r\n        <p>Для входа в чат, вам нужно зарегистрироваться</p>\r\n      </div>\r\n      <Block>\r\n        {!success ? (\r\n          <Form onSubmit={handleSubmit} className=\"login-form\">\r\n            <FormField\r\n              name=\"email\"\r\n              icon=\"mail\"\r\n              placeholder=\"E-Mail\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              touched={touched}\r\n              errors={errors}\r\n              values={values}\r\n            />\r\n            <FormField\r\n              name=\"fullname\"\r\n              icon=\"user\"\r\n              placeholder=\"Ваше имя и фамилия\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              touched={touched}\r\n              errors={errors}\r\n              values={values}\r\n            />\r\n            <FormField\r\n              name=\"password\"\r\n              icon=\"lock\"\r\n              placeholder=\"Пароль\"\r\n              type=\"password\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              touched={touched}\r\n              errors={errors}\r\n              values={values}\r\n            />\r\n            <FormField\r\n              name=\"password_2\"\r\n              icon=\"lock\"\r\n              placeholder=\"Повторите пароль\"\r\n              type=\"password\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              touched={touched}\r\n              errors={errors}\r\n              values={values}\r\n            />\r\n            <Form.Item>\r\n              {isSubmitting && !isValid && <span>Ошибка!</span>}\r\n              <Button\r\n                disabled={isSubmitting}\r\n                onClick={handleSubmit}\r\n                type=\"primary\"\r\n                size=\"large\"\r\n              >\r\n                Зарегистрироваться\r\n              </Button>\r\n            </Form.Item>\r\n            <Link className=\"auth__register-link\" to=\"/login\">\r\n              Войти в аккаунт\r\n            </Link>\r\n          </Form>\r\n        ) : (\r\n          <div className=\"auth__success-block\">\r\n            <div>\r\n              <Icon type=\"info-circle\" theme=\"twoTone\" />\r\n            </div>\r\n            <h2>Подтвердите свой аккаунт</h2>\r\n            <p>\r\n              На вашу почту отправлено письмо с сылкой на подтверждение аккаунта\r\n            </p>\r\n          </div>\r\n        )}\r\n      </Block>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import { withFormik } from \"formik\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport RegisterForm from \"../components/RegisterForm\";\r\nimport validateForm from \"../../../utils/validate\";\r\nimport { userActions } from \"../../../redux/actions\";\r\n\r\nconst RegisterFormContainer = withFormik({\r\n  enableReinitialize: true,\r\n\r\n  mapPropsToValues: () => ({\r\n    email: \"\",\r\n    fullname: \"\",\r\n    password: \"\",\r\n    password_2: \"\"\r\n  }),\r\n  // values - это объект, кот. предоставляет Formik в нём хранится ключ - id inut-ов, значение - текст input-a (email, password)\r\n  validate: values => {\r\n    let errors = {};\r\n    validateForm({ isAuth: false, values, errors });\r\n    return errors;\r\n  },\r\n\r\n  handleSubmit: (values, { setSubmitting, props }) => {\r\n    const { fetchUserRegister } = props;\r\n\r\n    fetchUserRegister(values)\r\n      .then(({ status }) => {\r\n        if (status === \"success\") {\r\n          props.history.push(\"/im\");\r\n        }\r\n        setSubmitting(false);\r\n      })\r\n      .catch(() => {\r\n        setSubmitting(false);\r\n      });\r\n  },\r\n\r\n  displayName: \"RegisterForm\"\r\n})(RegisterForm);\r\n\r\nexport default connect(\r\n  null,\r\n  userActions\r\n)(RegisterFormContainer);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Result, Button } from \"antd\";\r\n\r\nimport { userApi } from \"../../../utils/api\";\r\nimport { Block } from \"../../../components\";\r\n\r\nconst renderTextInfo = (hash, verified) => {\r\n  if (hash) {\r\n    if (verified) {\r\n      return {\r\n        status: \"success\",\r\n        message: \"Аккаунт успешно подтвержден!\"\r\n      };\r\n    } else {\r\n      return {\r\n        status: \"error\",\r\n        message: \"Ошибка при подтверждении аккаунта!\"\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      status: \"success\",\r\n      message: \"Ссылка с подтверждением аккаунта отправлена на E-Mail.\"\r\n    };\r\n  }\r\n};\r\n\r\nconst CheckEmailInfo = ({ location, history }, props) => {\r\n  const [verified, setVerified] = useState(false);\r\n  const hash = location.search.split(\"hash=\")[1]; // из url достаём hash \"?hash=$2b$10$Vk0mYnor1IRxWg.rh3mH0.2HF2eWcSiF80QM3X31DPDNraMhMskLO\"\r\n  const info = renderTextInfo(hash, verified);\r\n\r\n  useEffect(() => {\r\n    if (hash) {\r\n      userApi.verifyHash(hash).then(({ data }) => {\r\n        if (data.status === \"success\") {\r\n          setVerified(true);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Block>\r\n        <Result\r\n          status={info.status}\r\n          title={info.status === \"success\" ? \"Готово!\" : \"Ошибка\"}\r\n          subTitle={info.message}\r\n          extra={\r\n            info.status === \"success\" &&\r\n            verified && (\r\n              <Button type=\"primary\" onClick={() => history.push(\"/login\")}>\r\n                Войти\r\n              </Button>\r\n            )\r\n          }\r\n        />\r\n      </Block>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckEmailInfo;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport { LoginForm, RegisterForm } from '../../modules';\r\nimport CheckEmailInfo from \"./components/CheckEmailInfo\";\r\n\r\nimport './Auth.scss';\r\n\r\nclass Auth extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className=\"auth\">\r\n                <div className=\"auth__content\">\r\n                    <Route exact path={['/', '/login']} component={LoginForm} />\r\n                    <Route exact path='/register' component={RegisterForm} />\r\n                    <Route exact path=\"/register/verify\" component={CheckEmailInfo} />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Auth;\r\n","import io from \"socket.io-client\";\r\n\r\nconst socket = io('https://react-nodejs-mongodb-chat.herokuapp.com/'); // window.location.origin.replace(\"3000\", \"3333\")\r\n\r\nexport default socket;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { dialogsActions } from \"../redux/actions\";\r\nimport { Dialogs as BaseDialogs } from \"../components\";\r\n\r\nimport socket from \"../core/socket\";\r\n\r\nconst Dialogs = ({\r\n  items,\r\n  userId,\r\n  setCurrentDialogId,\r\n  currentDialogId,\r\n  fetchDialogs\r\n}) => {\r\n  // setCurrentDialogId, fetchDialogs - из dialogsActions\r\n  const [inputValue, setValue] = useState(\"\"); // state для отображения значения input-a ввода\r\n  const [filtred, setFiltredItems] = useState(Array.from(items)); // state для фильтрации значений из массива\r\n\r\n  const onChangeInput = (value = \"\") => {\r\n    // e.target.value придёт сюда\r\n    setFiltredItems(\r\n      items.filter(\r\n        dialog =>\r\n          dialog.author.fullname.toLowerCase().indexOf(value.toLowerCase()) >=\r\n            0 || // indexOf - позиция символа\r\n          dialog.partner.fullname.toLowerCase().indexOf(value.toLowerCase()) >=\r\n            0\r\n      )\r\n    );\r\n\r\n    setValue(value);\r\n  };\r\n\r\n  const onNewDialog = () => {\r\n    fetchDialogs();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (items.length) {\r\n      onChangeInput();\r\n    }\r\n  }, [items]);\r\n\r\n  useEffect(() => {\r\n    fetchDialogs();\r\n\r\n    socket.on(\"SERVER:DIALOG_CREATED\", onNewDialog);\r\n    return () => socket.removeListener(\"SERVER:DIALOG_CREATED\", onNewDialog);\r\n  }, []);\r\n\r\n  return (\r\n    <BaseDialogs\r\n      userId={userId}\r\n      items={filtred}\r\n      onSearch={onChangeInput}\r\n      inputValue={inputValue}\r\n      onSelectDialog={setCurrentDialogId}\r\n      currentDialogId={currentDialogId}\r\n    />\r\n  );\r\n};\r\n\r\n// с помощью деструктуризации достаём из глобального state.dialogs, далее из dialogs достаём items тоже через деструктуризацию\r\nexport default connect(\r\n  ({ dialogs }) => dialogs,\r\n  dialogsActions\r\n)(Dialogs);\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport socket from \"../core/socket\";\r\nimport { messagesActions } from \"../redux/actions\";\r\n\r\nimport { Messages as BaseMessages } from \"../components\";\r\n\r\nconst Messages = ({ currentDialogId, fetchMessages, addMessage, items, isLoading, user }) => {\r\n  const messagesRef = useRef(null);\r\n\r\n  const onNewMessage = data => {\r\n    addMessage(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentDialogId) {\r\n      fetchMessages(currentDialogId);\r\n    }\r\n\r\n    socket.on(\"SERVER:NEW_MESSAGE\", onNewMessage); // сообщение придёт с сервера через сокет и попадёт в ф-цию\r\n\r\n    return () => socket.removeListener(\"SERVER:NEW_MESSAGE\", onNewMessage);\r\n  }, [currentDialogId]);\r\n\r\n  useEffect(() => {\r\n    messagesRef.current.scrollTo(0, messagesRef.current.scrollHeight); // при открытии диалога scroll будет всегда внизу (чтобы отобразить последние сообщения)\r\n  }, [items]);\r\n\r\n  return (\r\n    <BaseMessages blockRef={messagesRef} items={items} isLoading={isLoading} user={user} />\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  ({ messages, dialogs, user }) => ({\r\n    items: messages.items,\r\n    currentDialogId: dialogs.currentDialogId,\r\n    isLoading: messages.isLoading,\r\n    user: user.data\r\n  }),\r\n  messagesActions\r\n)(Messages);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { messagesActions } from \"../redux/actions\";\r\nimport { ChatInput } from \"../components\";\r\n\r\nexport default connect(\r\n  ({ dialogs }) => dialogs,\r\n  messagesActions\r\n)(ChatInput);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Status } from \"../components\";\r\n\r\nconst StatusContainer = ({ currentDialogId, user, dialogs }) => {\r\n  if (!dialogs.length || !currentDialogId) {\r\n    return null;\r\n  }\r\n\r\n  const currentDialogObj = dialogs.filter(\r\n    dialog => dialog._id === currentDialogId\r\n  )[0];\r\n\r\n  let partner = {};\r\n\r\n  if (currentDialogObj.author._id === user._id) {\r\n    partner = currentDialogObj.partner;\r\n  } else {\r\n    partner = currentDialogObj.author;\r\n  }\r\n\r\n  return <Status online={partner.isOnline} fullname={partner.fullname} />;\r\n};\r\n\r\nexport default connect(({ dialogs, user }) => ({\r\n  dialogs: dialogs.items,\r\n  currentDialogId: dialogs.currentDialogId,\r\n  user: user.data\r\n}))(StatusContainer);\r\n","import React from \"react\";\r\nimport { Icon, Button } from \"antd\";\r\n\r\nimport { Dialogs, Messages, ChatInput, Status } from \"../../containers\";\r\n\r\nimport \"./Home.scss\";\r\n\r\nconst Home = () => (\r\n  <section className=\"home\">\r\n    <div className=\"chat\">\r\n      <div className=\"chat__sidebar\">\r\n        <div className=\"chat__sidebar-header\">\r\n          <div>\r\n            <Icon type=\"team\" />\r\n            <span>Список диалогов</span>\r\n          </div>\r\n          <Button type=\"link\" shape=\"circle\" icon=\"form\" />\r\n        </div>\r\n\r\n        <div className=\"chat__sidebar-dialogs\">\r\n          <Dialogs userId={0} />\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__dialog\">\r\n        <div className=\"chat__dialog-header\">\r\n          <div />\r\n          <Status/>\r\n          <Button type=\"link\" shape=\"circle\" icon=\"ellipsis\" />\r\n        </div>\r\n        <div className=\"chat__dialog-messages\">\r\n          <Messages />\r\n        </div>\r\n        <div className=\"chat__dialog-input\">\r\n          <ChatInput />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Redirect, Switch } from \"react-router-dom\";\r\n\r\nimport { Auth, Home } from \"./pages\";\r\n\r\nconst App = ({ isAuth }) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path={[\"/login\", \"/register\", \"/register/verify\"]}\r\n          component={Auth}\r\n        />\r\n        <Route\r\n          path=\"/\"\r\n          render={() => (isAuth ? <Home /> : <Redirect to=\"/login\" />)}\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(({ user }) => ({ isAuth: user.isAuth }))(App);\r\n","const initialState = {\r\n  items: [],\r\n  currentDialogId: window.location.pathname.split(\"dialog/\")[1],\r\n  isLoading: false\r\n};\r\n// { type, payload } - деструктуризация action\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"DIALOGS:SET_ITEMS\":\r\n      return {\r\n        ...state,\r\n        items: payload\r\n      };\r\n    case \"DIALOGS:SET_CURRENT_DIALOG_ID\":\r\n      return {\r\n        ...state,\r\n        currentDialogId: payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  items: [],\r\n  isLoading: false\r\n};\r\n// { type, payload } - деструктуризация action\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"MESSAGES:ADD_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        items: [...state.items, payload]\r\n      };\r\n    case \"MESSAGES:SET_ITEMS\":\r\n      return {\r\n        ...state,\r\n        items: payload,\r\n        isLoading: false\r\n      };\r\n    case \"MESSAGES:SET_IS_LOADING\":\r\n      return {\r\n        ...state,\r\n        isLoading: payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  data: null,\r\n  token: window.localStorage.token,\r\n  isAuth: !!window.localStorage.token\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"USER:SET_DATA\":\r\n      return {\r\n        ...state,\r\n        data: payload,\r\n        token: window.localStorage.token,\r\n        isAuth: true\r\n      };\r\n    case \"USER:SET_IS_AUTH\":\r\n      return {\r\n        ...state,\r\n        isAuth: payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport dialogs from \"./dialogs\";\r\nimport messages from \"./messages\";\r\nimport user from \"./user\";\r\n\r\nexport default combineReducers({\r\n  dialogs,\r\n  messages,\r\n  user\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport App from \"./App\";\r\nimport { userActions } from \"./redux/actions\";\r\n\r\nimport store from './redux/store';\r\n\r\nimport \"./styles/index.scss\"; // библиотеки antd, в самом файле происходит подключение, кот. будет доступно всем компонентам\r\nimport 'emoji-mart/css/emoji-mart.css';\r\n\r\nstore.dispatch(userActions.fetchUserData());\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}